{
  "name": "react-prop-types",
  "version": "0.2.2",
  "description": "React PropType Utilities",
  "main": "lib/index.js",
  "files": [
    "LICENSE",
    "README.md",
    "lib"
  ],
  "scripts": {
    "build": "rm -rf lib && babel src --out-dir lib",
    "lint": "eslint .",
    "test": "npm run lint && karma start --single-run",
    "tdd": "karma start",
    "coverage": "COVERAGE=true karma start --single-run",
    "patch": "release patch",
    "minor": "release minor",
    "major": "release major"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/react-bootstrap/react-prop-types.git"
  },
  "keywords": [
    "react",
    "react-proptype",
    "react-proptypes",
    "react-prop-type",
    "react-prop-types",
    "react-component",
    "ecosystem-react"
  ],
  "author": {
    "name": "Matthew L Smith",
    "email": "mtscout6@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/react-bootstrap/react-prop-types/issues"
  },
  "homepage": "https://github.com/react-bootstrap/react-prop-types#readme",
  "devDependencies": {
    "babel": "^5.6.14",
    "babel-core": "^5.6.15",
    "babel-eslint": "^4.0.5",
    "babel-loader": "^5.3.0",
    "chai": "^3.0.0",
    "es5-shim": "^4.1.7",
    "eslint": "^1.0.0",
    "eslint-config-airbnb": "0.0.7",
    "eslint-plugin-babel": "^2.0.0",
    "eslint-plugin-mocha": "^0.4.0",
    "eslint-plugin-react": "^3.2.3",
    "isparta-loader": "^0.2.0",
    "karma": "^0.13.7",
    "karma-chrome-launcher": "^0.2.0",
    "karma-cli": "^0.1.0",
    "karma-coverage": "^0.5.0",
    "karma-coveralls": "^1.1.0",
    "karma-mocha": "^0.2.0",
    "karma-mocha-reporter": "^1.0.2",
    "karma-sinon-chai": "^1.0.0",
    "karma-sourcemap-loader": "^0.3.5",
    "karma-webpack": "^1.5.1",
    "mocha": "^2.2.5",
    "mt-changelog": "^0.6.1",
    "node-libs-browser": "^0.5.2",
    "react": "^0.13.3",
    "release-script": "^0.2.1",
    "sinon": "^1.15.4",
    "sinon-chai": "^2.8.0",
    "webpack": "^1.10.1",
    "yargs": "^3.14.0"
  },
  "dependencies": {
    "warning": "^2.0.0"
  },
  "readme": "# react-prop-types\n\n[![Travis Build Status][build-badge]][build]\n\nThis is a library of some custom validators for React components properties.\nInitially they were part of the [React-Bootstrap](https://github.com/react-bootstrap/react-bootstrap/) project.\n\n### Usage\n\nAll validators can be imported as\n```js\nimport elementType from 'react-prop-types/elementType';\n// or\nimport { elementType } from 'react-prop-types';\n...\npropTypes: {\n  someProp: elementType\n```\nor\n```js\nimport CustomPropTypes from 'react-prop-types';\n// and then used as usual\npropTypes: {\n  someProp: CustomPropTypes.elementType\n```\n\nIf you use `webpack` and only want to bundle the validators you need, prefer the following approach:\n```js\nimport elementType from 'react-prop-types/elementType'\n```\n\n---\n#### all(arrayOfValidators)\n\nThis validator allows to have complex validation like this:\n```js\npropTypes: {\n  vertical:  React.PropTypes.bool,\n  /**\n   * Display block buttons, only useful when used with the \"vertical\" prop.\n   * @type {bool}\n   */\n  block: CustomPropTypes.all([\n    React.PropTypes.bool,\n    function(props, propName, componentName) {\n      if (props.block && !props.vertical) {\n        return new Error('The block property requires the vertical property to be set to have any effect');\n      }\n    }\n  ])\n```\n\nAll validators will be validated one by one, stopping on the first failure.\n\nThe `all()` validator will only succeed when all validators provided also succeed.\n\n---\n#### elementType\n\nChecks whether a property provides a type of element.\nThe type of element can be provided in two forms:\n- tag name (string)\n- a return value of `React.createClass(...)`\n\nExample\n```js\npropTypes: {\n  componentClass: CustomPropTypes.elementType\n```\nThen, `componentClass` can be set by doing:\n```js\n<Component componentClass='span' />\n```\nor\n```js\nconst Button = React.createClass(...);\n...\n<Component componentClass={Button} />\n```\n\n---\n#### isRequiredForA11y(requiredType)\n\nThis is kind of `React.PropTypes.<type>.isRequired` with the custom error message:\n`The prop <propName> is required for users using assistive technologies`\n\nExample\n```js\npropTypes: {\n  /**\n   * An html id attribute, necessary for accessibility\n   * @type {string}\n   * @required\n   */\n  id: CustomPropTypes.isRequiredForA11y(React.PropTypes.string)\n```\n\n---\n#### keyOf(object)\n\nChecks whether provided string value is one of provided object's keys.\n\nExample\n```js\nconst SIZES = {\n  'large': 'lg',\n  'small': 'sm'\n}\n\npropTypes: {\n  size: CustomPropTypes.keyOf(SIZES)\n}\n\n// this validates OK\n<Component size=\"large\" />\n\n// this throws the error `expected one of [\"large\", \"small\"]`\n<Component size=\"middle\" />\n```\n\nA more extended example\n```js\nconst styleMaps = {\n  CLASSES: {\n    'alert': 'alert',\n    'button': 'btn'\n  ...\n  SIZES: {\n    'large': 'lg',\n    'medium': 'md',\n    'small': 'sm',\n    'xsmall': 'xs'\n  }\n...\npropTypes: {\n  /**\n   * bootstrap className\n   * @private\n   */\n  bsClass: CustomPropTypes.keyOf(styleMaps.CLASSES),\n  /**\n   * Style variants\n   * @type {(\"default\"|\"primary\"|\"success\"|\"info\"|\"warning\"|\"danger\"|\"link\")}\n   */\n  bsStyle: CustomPropTypes.keyOf(styleMaps.STYLES),\n  /**\n   * Size variants\n   * @type {(\"xsmall\"|\"small\"|\"medium\"|\"large\")}\n   */\n  bsSize: CustomPropTypes.keyOf(styleMaps.SIZES)\n}\n```\n\n---\n#### mountable\n\nChecks whether a prop provides a DOM element\nThe element can be provided in two forms:\n- Directly passed\n- Or passed an object that has a `render` method\n\nExample\n```js\npropTypes: {\n  modal: React.PropTypes.node.isRequired,\n  /**\n   * The DOM Node that the Component will render it's children into\n   */\n  container: CustomPropTypes.mountable\n```\n\nA variant of usage `<Overlay container={this}>`\n```js\nconst Example = React.createClass({\n  getInitialState(){ return { show: true } },\n  toggle(){ this.setState({ show: !this.state.show }) },\n\n  render(){\n    const tooltip = <Tooltip>Tooltip overload!</Tooltip>;\n\n    return (\n      <div>\n        <Button ref='target' onClick={this.toggle}>\n          Click me!\n        </Button>\n\n        <Overlay container={this}>\n          { tooltip }\n        </Overlay>\n      </div>\n    );\n  }\n});\n\nReact.render(<Example/>, mountNode);\n```\n\n---\n#### singlePropFrom(arrayOfPropertiesNames)\n\nUsed when it needs to assure that only one of properties can be used.\n\nImagine we need the `value` for our `ButtonInput` component could be set\nby only one of two ways:\n- through `children`\n- through `value` preperty\nBut not both.\n\nLike this:\n```js\n<ButtonInput> ButtonValue </ButtonInput>\n```\nor\n```js\n<ButtonInput value=\"ButtonValue\" />\n```\n\nBut this should throw the `only one of the following may be provided` error\n```js\n<ButtonInput value=\"ButtonValue\"> SomeChildren </ButtonInput>\n```\n\nThe possible solution\n```js\nimport { singlePropFrom } from 'react-prop-types/singlePropFrom';\n\nconst propList = ['children', 'value'];\nconst typeList = [React.PropTypes.number, React.PropTypes.string];\n\nfunction childrenValueValidation(props, propName, componentName) {\n  let error = singlePropFrom(propList)(props, propName, componentName);\n  if (!error) {\n    const oneOfType = React.PropTypes.oneOfType(typeList);\n    error = oneOfType(props, propName, componentName);\n  }\n  return error;\n}\n\n...\n\nButtonInput.propTypes = {\n  children: childrenValueValidation,\n  value: childrenValueValidation\n```\n\n---\n#### deprecated(propType, explanation)\n\nHelps with properties deprecations\n\nExample\n```js\npropTypes: {\n  collapsable: deprecated(React.PropTypes.bool, 'Use \"collapsible\" instead.')\n```\n\nIn development mode it will write to the development console of a browser:\n```\n\"collapsable\" property of \"ComponentName\" has been deprecated.\nUse \"collapsible\" instead.\n```\n\n_Notice: this custom validator uses 'warning' package under the hood.\nAnd this package uses `console.error` channel instead of `console.warn`._\n\n[build-badge]: https://travis-ci.org/react-bootstrap/react-prop-types.svg?branch=master\n[build]: https://travis-ci.org/react-bootstrap/react-prop-types\n",
  "readmeFilename": "README.md",
  "_id": "react-prop-types@0.2.2",
  "dist": {
    "shasum": "f7ea019d0acfb9389a1582893fb1671e4fcab2cd"
  },
  "_from": "react-prop-types@^0.2.1",
  "_resolved": "https://registry.npmjs.org/react-prop-types/-/react-prop-types-0.2.2.tgz"
}
